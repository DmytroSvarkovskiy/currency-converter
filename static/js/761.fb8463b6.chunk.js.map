{"version":3,"file":"static/js/761.fb8463b6.chunk.js","mappings":"4NACaA,E,OAAeC,GAAAA,GAAS,8G,2BCuErC,EAjE4B,WAC1B,OAA8BC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,YAAY,IAAhEC,EAAI,EAAJA,KAAMC,EAAW,EAAXA,YACRC,EAAWC,OAAOC,KAAKJ,GAE7B,GAAqCK,EAAAA,EAAAA,UAASJ,GAAY,eAAnDK,EAAU,KAAEC,EAAc,KACjC,GAAmCF,EAAAA,EAAAA,UAASJ,GAAY,eAAjDO,EAAS,KAAEC,EAAa,KAC/B,GAAgCJ,EAAAA,EAAAA,UAAS,IAAG,eAArCK,EAAQ,KAAEC,EAAW,KAC5B,GAA8BN,EAAAA,EAAAA,UAAS,IAAG,eAAnCO,EAAO,KAAEC,EAAU,KACpBC,EAAkBZ,EAASa,WAAU,SAAAC,GAAE,OAAIA,IAAOV,CAAU,IAC5DW,EAAiBf,EAASa,WAAU,SAAAC,GAAE,OAAIA,IAAOR,CAAS,IAoBhE,OACE,8BACE,SAACU,EAAA,EAAS,WACR,UAAC,KAAM,YACL,SAACvB,EAAY,UAAC,mCACQ,IAArBmB,IACC,gBAAKK,IAAKC,EAAAA,EAAqBN,GAAiBR,GAAae,IAAI,UAEnE,mBAAQC,SA1BK,SAACC,GACpBhB,EAAegB,EAAEC,OAAOC,OACxBZ,GAAab,EAAKQ,GAAaR,EAAKuB,EAAEC,OAAOC,QAAWf,GAAUgB,QAAQ,GAAGC,WAC/E,EAuBwCF,MAAOnB,EAAW,SAC/CJ,EAAS0B,KAAI,SAAAZ,GACZ,OACE,mBAAiBS,MAAOT,EAAG,SACxBA,GADUA,EAIjB,OAEF,kBAAOa,KAAK,SAASC,YAAY,IAAIL,MAAOf,EAAUY,SA1B1C,SAACC,GACnBZ,EAAYY,EAAEC,OAAOC,OACrBZ,GAAab,EAAKQ,GAAaR,EAAKM,IAAgBiB,EAAEC,OAAOC,OAAOC,QAAQ,GAAGC,WACjF,KAwBQ,kBAAOF,MAAOb,EAASiB,KAAK,SAASP,SAvB1B,SAACC,GAClBV,EAAWU,EAAEC,OAAOC,MAEtB,EAoBmEK,YAAY,OACvE,mBAAQR,SAjCO,SAACC,GACtBd,EAAcc,EAAEC,OAAOC,OACvBZ,GAAab,EAAKuB,EAAEC,OAAOC,OAASzB,EAAKM,IAAgBI,GAAUgB,QAAQ,GAAGC,WAChF,EA8B0CF,MAAOjB,EAAU,SAChDN,EAAS0B,KAAI,SAAAZ,GACZ,OACE,mBAAiBS,MAAOT,EAAG,SACxBA,GADUA,EAIjB,OAEmB,IAApBC,IACC,gBAAKE,IAAKC,EAAAA,EAAqBH,GAAgBT,GAAYa,IAAI,eAM3E,C","sources":["conponents/pages/Converter/Converter.styled.tsx","conponents/pages/Converter/Converter.tsx"],"sourcesContent":["import styled from 'styled-components';\nexport const ConvertTitle = styled.h2`\n  text-align: center;\n  font-size: 35px;\n  color: #756059;\n  margin-bottom: 40px;\n`;\n","import { Container } from '../../Container/Container';\nimport { Casket } from '../Home/Home.styled';\nimport { useAppSelector } from '../../../hooks';\nimport { ConvertTitle } from './Converter.styled';\nimport { useState } from 'react';\nimport { currencyListWithFlag } from '../../../currencyList';\n\nconst Converter: React.FC = () => {\n  const { rate, currentRate } = useAppSelector(state => state.exchangeRate);\n  const currency = Object.keys(rate);\n  // const course = Object.values(rate);\n  const [forCurency, setForCurrency] = useState(currentRate);\n  const [toCurency, setToCurrency] = useState(currentRate);\n  const [forCount, setForCount] = useState('');\n  const [toState, setToState] = useState('');\n  const currentIndexFor = currency.findIndex(el => el === forCurency);\n  const currentIndexTo = currency.findIndex(el => el === toCurency);\n\n  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n    setForCurrency(e.target.value);\n    setToState(((rate[toCurency] / rate[e.target.value]) * +forCount).toFixed(5).toString());\n  };\n  const handleToChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n    setToCurrency(e.target.value);\n    setToState(((rate[e.target.value] / rate[forCurency]) * +forCount).toFixed(5).toString());\n  };\n\n  const onForChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setForCount(e.target.value);\n    setToState(((rate[toCurency] / rate[forCurency]) * +e.target.value).toFixed(5).toString());\n  };\n  const onToChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setToState(e.target.value);\n    // setForCount(((rate[toCurency] / rate[forCurency]) * +e.target.value).toFixed(5).toString());\n  };\n\n  return (\n    <section>\n      <Container>\n        <Casket>\n          <ConvertTitle>Convert the required currency</ConvertTitle>\n          {currentIndexFor !== -1 && (\n            <img src={currencyListWithFlag[currentIndexFor][forCurency]} alt=\"flag\" />\n          )}\n          <select onChange={handleChange} value={forCurency}>\n            {currency.map(el => {\n              return (\n                <option key={el} value={el}>\n                  {el}\n                </option>\n              );\n            })}\n          </select>\n          <input type=\"number\" placeholder=\"0\" value={forCount} onChange={onForChange} />\n          <input value={toState} type=\"number\" onChange={onToChange} placeholder=\"0\" />\n          <select onChange={handleToChange} value={toCurency}>\n            {currency.map(el => {\n              return (\n                <option key={el} value={el}>\n                  {el}\n                </option>\n              );\n            })}\n          </select>\n          {currentIndexTo !== -1 && (\n            <img src={currencyListWithFlag[currentIndexTo][toCurency]} alt=\"flag\" />\n          )}\n        </Casket>\n      </Container>\n    </section>\n  );\n};\nexport default Converter;\n"],"names":["ConvertTitle","styled","useAppSelector","state","exchangeRate","rate","currentRate","currency","Object","keys","useState","forCurency","setForCurrency","toCurency","setToCurrency","forCount","setForCount","toState","setToState","currentIndexFor","findIndex","el","currentIndexTo","Container","src","currencyListWithFlag","alt","onChange","e","target","value","toFixed","toString","map","type","placeholder"],"sourceRoot":""}
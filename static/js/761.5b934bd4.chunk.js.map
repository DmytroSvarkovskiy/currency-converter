{"version":3,"file":"static/js/761.5b934bd4.chunk.js","mappings":"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","sources":["conponents/pages/Converter/Converter.styled.tsx","conponents/pages/Converter/Converter.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { RiExchangeDollarLine, RiArrowRightLine } from 'react-icons/ri';\n\nexport const ConvertTitle = styled.h2`\n  text-align: center;\n  font-size: 35px;\n  color: #756059;\n  margin-bottom: 100px;\n`;\nexport const FlagConvert = styled.img`\n  width: 140px;\n  height: 80px;\n  border-radius: 7px;\n  overflow: hidden;\n  margin-right: 10px;\n  border: 1px solid #756059;\n`;\nexport const WrapMainContent = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  gap: 20px;\n  align-items: center;\n`;\nexport const WrapSelect = styled.div`\n  display: flex;\n  align-items: center;\n`;\nexport const SelectConvert = styled.select`\n  border-top-right-radius: 7px;\n  border-bottom-right-radius: 7px;\n  border: none;\n  display: flex;\n  outline: none;\n  background-color: #e6e6e6;\n  font-size: 22px;\n  color: #756059;\n  font-weight: 600;\n  height: 80px;\n`;\nexport const InputConvert = styled.input`\n  border-top-left-radius: 7px;\n  border-bottom-left-radius: 7px;\n  border: none;\n  padding: 5px 10px;\n  font-size: 55px;\n  width: 380px;\n  font-weight: 600;\n  color: #756059;\n  height: 120px;\n  height: 80px;\n  background-color: #eeecec;\n`;\nexport const ConvertIcon = styled(RiExchangeDollarLine)`\n  height: 50px;\n  width: 50px;\n  color: #c4907e;\n  transition: color 0.3s;\n`;\nexport const TextConvert = styled.p`\n  width: 60px;\n  font-size: 26px;\n  font-weight: 500;\n  color: #756059;\n  margin-right: 15px;\n`;\nexport const ArrowConvert = styled(RiArrowRightLine)`\n  height: 40px;\n  width: 40px;\n  margin-right: 10px;\n  color: #756059;\n`;\nexport const ButtonConvert = styled.button`\n  background-color: transparent;\n  margin-left: 180px;\n  border: none;\n  cursor: pointer;\n  &:hover {\n    svg {\n      color: #e79537;\n    }\n  }\n`;\nexport const CurrencyName = styled.p`\n  font-size: 25px;\n  color: #756059;\n  font-weight: 600;\n  margin-left: 20%;\n`;\n","import { Container } from '../../Container/Container';\nimport { Casket } from '../Home/Home.styled';\nimport { useAppSelector } from '../../../hooks';\nimport {\n  ConvertTitle,\n  FlagConvert,\n  WrapSelect,\n  WrapMainContent,\n  SelectConvert,\n  InputConvert,\n  ConvertIcon,\n  TextConvert,\n  ArrowConvert,\n  ButtonConvert,\n  CurrencyName,\n} from './Converter.styled';\nimport React, { useState } from 'react';\nimport { currencyListWithFlag } from '../../../currencyList';\n\nconst Converter: React.FC = () => {\n  const { rate, currentRate } = useAppSelector(state => state.exchangeRate);\n  const currency = Object.keys(rate);\n  const [fromCurency, setFromCurrency] = useState(currentRate);\n  const [toCurency, setToCurrency] = useState(currentRate);\n  const [fromCount, setFromCount] = useState('1');\n  const [toCount, setToCount] = useState('1');\n  const currentIndexFor = currency.findIndex(el => el === fromCurency);\n  const currentIndexTo = currency.findIndex(el => el === toCurency);\n\n  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n    setFromCurrency(e.target.value);\n    setToCount(\n      parseFloat(((rate[toCurency] / rate[e.target.value]) * +fromCount).toFixed(4)).toString()\n    );\n  };\n  const handleToChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n    setToCurrency(e.target.value);\n    setToCount(\n      parseFloat(((rate[e.target.value] / rate[fromCurency]) * +fromCount).toFixed(4)).toString()\n    );\n  };\n\n  const onForChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setFromCount(e.target.value);\n    setToCount(\n      parseFloat(((rate[toCurency] / rate[fromCurency]) * +e.target.value).toFixed(4)).toString()\n    );\n  };\n  const onToChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setToCount(e.target.value);\n    setFromCount(\n      parseFloat(((rate[fromCurency] / rate[toCurency]) * +e.target.value).toFixed(4)).toString()\n    );\n  };\n  const changePlaces = (): void => {\n    setFromCurrency(toCurency);\n    setToCurrency(fromCurency);\n    setFromCount(toCount);\n    setToCount(fromCount);\n  };\n\n  return (\n    <section>\n      <Container>\n        <Casket>\n          <ConvertTitle>Convert the required currency</ConvertTitle>\n          <WrapMainContent>\n            {currentIndexFor !== -1 && (\n              <CurrencyName>{currencyListWithFlag[currentIndexFor].title}</CurrencyName>\n            )}\n            <WrapSelect>\n              <TextConvert>From</TextConvert>\n              <ArrowConvert />\n              {currentIndexFor !== -1 && (\n                <FlagConvert src={currencyListWithFlag[currentIndexFor][fromCurency]} alt=\"flag\" />\n              )}\n\n              <InputConvert\n                type=\"number\"\n                placeholder=\"0\"\n                value={fromCount}\n                onChange={onForChange}\n              />\n              <SelectConvert onChange={handleChange} value={fromCurency}>\n                {currency.map(el => {\n                  return (\n                    <option key={el} value={el}>\n                      {el}\n                    </option>\n                  );\n                })}\n              </SelectConvert>\n            </WrapSelect>\n            <ButtonConvert onClick={changePlaces}>\n              <ConvertIcon />\n            </ButtonConvert>\n            <WrapSelect>\n              <TextConvert>To</TextConvert>\n              <ArrowConvert />\n              {currentIndexTo !== -1 && (\n                <FlagConvert src={currencyListWithFlag[currentIndexTo][toCurency]} alt=\"flag\" />\n              )}{' '}\n              <InputConvert value={toCount} type=\"number\" onChange={onToChange} placeholder=\"0\" />{' '}\n              <SelectConvert onChange={handleToChange} value={toCurency}>\n                {currency.map(el => {\n                  return (\n                    <option key={el} value={el}>\n                      {el}\n                    </option>\n                  );\n                })}\n              </SelectConvert>\n            </WrapSelect>\n            {currentIndexTo !== -1 && (\n              <CurrencyName>{currencyListWithFlag[currentIndexTo].title}</CurrencyName>\n            )}{' '}\n          </WrapMainContent>\n        </Casket>\n      </Container>\n    </section>\n  );\n};\nexport default Converter;\n"],"names":["ConvertTitle","styled","FlagConvert","WrapMainContent","WrapSelect","SelectConvert","InputConvert","ConvertIcon","RiExchangeDollarLine","TextConvert","ArrowConvert","RiArrowRightLine","ButtonConvert","CurrencyName","useAppSelector","state","exchangeRate","rate","currentRate","currency","Object","keys","useState","fromCurency","setFromCurrency","toCurency","setToCurrency","fromCount","setFromCount","toCount","setToCount","currentIndexFor","findIndex","el","currentIndexTo","Container","currencyListWithFlag","title","src","alt","type","placeholder","value","onChange","e","target","parseFloat","toFixed","toString","map","onClick"],"sourceRoot":""}